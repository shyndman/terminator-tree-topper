use super::reg::{Mode, RegisterAddress as Addr};

const HIMAX_LINE_LEN_PCK_VGA: u16 = 0x300;
const HIMAX_FRAME_LENGTH_VGA: u16 = 0x214;

const HIMAX_LINE_LEN_PCK_QVGA: u16 = 0x178;
const HIMAX_FRAME_LENGTH_QVGA: u16 = 0x109;

const HIMAX_LINE_LEN_PCK_QQVGA: u16 = 0x178;
const HIMAX_FRAME_LENGTH_QQVGA: u16 = 0x084;

const HIMAX_MD_ROI_VGA_W: u8 = 40;
const HIMAX_MD_ROI_VGA_H: u8 = 30;

const HIMAX_MD_ROI_QVGA_W: u8 = 20;
const HIMAX_MD_ROI_QVGA_H: u8 = 15;

const HIMAX_MD_ROI_QQVGA_W: u8 = 10;
const HIMAX_MD_ROI_QQVGA_H: u8 = 8;

pub const HM0360_DEFAULT_REGISTERS: [(u16, u8); 242] = [
    (Addr::SoftwareReset as u16, 0x00),
    (Addr::MonoMode as u16, 0x01),
    (Addr::MonoModeIsp as u16, 0x01),
    (Addr::MonoModeSel as u16, 0x00),
    // BLC control
    (0x1000, 0x43),
    (0x1003, 0x20),
    (Addr::BlcTgt as u16, 0x20),
    (0x1007, 0x01),
    (0x1008, 0x20),
    (Addr::Blc2Tgt as u16, 0x20),
    (Addr::MonoCtrl as u16, 0x01),
    // Output format control
    (Addr::OpfmCtrl as u16, 0b0000_0100),

    // Reserved regs
    (0x101D, 0x00),
    (0x101E, 0x01),
    (0x101F, 0x00),
    (0x1020, 0x01),
    (0x1021, 0x00),
    (Addr::CmprsCtrl as u16, 0x00),
    (Addr::Cmprs01 as u16, 0x09),
    (Addr::Cmprs02 as u16, 0x12),
    (Addr::Cmprs03 as u16, 0x23),
    (Addr::Cmprs04 as u16, 0x31),
    (Addr::Cmprs05 as u16, 0x3E),
    (Addr::Cmprs06 as u16, 0x4B),
    (Addr::Cmprs07 as u16, 0x56),
    (Addr::Cmprs08 as u16, 0x5E),
    (Addr::Cmprs09 as u16, 0x65),
    (Addr::Cmprs10 as u16, 0x72),
    (Addr::Cmprs11 as u16, 0x7F),
    (Addr::Cmprs12 as u16, 0x8C),
    (Addr::Cmprs13 as u16, 0x98),
    (Addr::Cmprs14 as u16, 0xB2),
    (Addr::Cmprs15 as u16, 0xCC),
    (Addr::Cmprs16 as u16, 0xE6),
    (Addr::ClockControl1 as u16, 0xff), // Core = 12MHz PCLKO = 24MHz I2C = 12MHz
    (Addr::ClockControl2 as u16, 0x0A), // MIPI pre-dev (default)
    (Addr::ClockControl3 as u16, 0x77), // PMU/MIPI pre-dev (default)
    (Addr::PmuCfg3 as u16, 0x08),       // Disable context switching
    (Addr::AnaRegister04 as u16, 0b1000_0000),
    (Addr::AnaRegister07 as u16, 0b1100), // PCLKO_polarity falling
    // (Addr::AeCtrl as u16, 0x7F),        // Automatic Exposure (NOTE: Auto framerate enabled)
    // (Addr::AeCtrl1 as u16, 0x00),
    // (Addr::TDamping as u16, 0x20),      // AE T damping factor
    // (Addr::NDamping as u16, 0x00),      // AE N damping factor
    // (Addr::AeTargetMean as u16, 0x64),  // AE target
    // (Addr::AeMinMean as u16, 0x0A),     // AE min target mean
    // (Addr::AeTargetZone as u16, 0x23),  // AE target zone
    // (Addr::ConvergeInTh as u16, 0x03),  // AE converge in threshold
    // (Addr::ConvergeOutTh as u16, 0x05), // AE converge out threshold
    (
        Addr::MaxIntgH as u16,
        ((HIMAX_FRAME_LENGTH_QVGA - 4) >> 8) as u8,
    ),
    (
        Addr::MaxIntgL as u16,
        ((HIMAX_FRAME_LENGTH_QVGA - 4) & 0xFF) as u8,
    ),
    // (Addr::MaxAgain as u16, 0x04), // Maximum analog gain
    // (Addr::MaxDgainH as u16, 0x03),
    // (Addr::MaxDgainL as u16, 0x3F),
    // (Addr::IntegrationH as u16, 0x01),
    // (Addr::IntegrationL as u16, 0x08),
    // (Addr::MdCtrl as u16, 0x6A),
    // (Addr::MdThMin as u16, 0x01),
    // (Addr::MdBlockNumTh as u16, 0x01),
    // (Addr::MdCtrl1 as u16, 0x06),
    (Addr::PulseMode as u16, 0x00), // Interrupt in level mode.
    (Addr::RoiStartEndV as u16, 0xE0),
    (Addr::RoiStartEndH as u16, 0xF0),
    (
        Addr::FrameLenLinesH as u16,
        (HIMAX_FRAME_LENGTH_QVGA >> 8) as u8,
    ),
    (
        Addr::FrameLenLinesL as u16,
        (HIMAX_FRAME_LENGTH_QVGA & 0xFF) as u8,
    ),
    (
        Addr::LineLenPckH as u16,
        (HIMAX_LINE_LEN_PCK_QVGA >> 8) as u8,
    ),
    (
        Addr::LineLenPckL as u16,
        (HIMAX_LINE_LEN_PCK_QVGA & 0xFF) as u8,
    ),
    (Addr::HSubsample as u16, 0x01),
    (Addr::VSubsample as u16, 0x01),
    (Addr::BinningMode as u16, 0x00),
    (Addr::WinMode as u16, 0x00),
    (Addr::ImageOrientation as u16, 0x00),
    (Addr::CommandUpdate as u16, 0x01),
    /// SYNC function config.
    (0x3010, 0x00),
    (0x3013, 0x01),
    (0x3019, 0x00),
    (0x301A, 0x00),
    (0x301B, 0x20),
    (0x301C, 0xFF),
    // PREMETER config.
    (0x3026, 0x03),
    (0x3027, 0x81),
    (0x3028, 0x01),
    (0x3029, 0x00),
    (0x302A, 0x30),
    (0x302E, 0x00),
    (0x302F, 0x00),
    // Magic regs ðŸª„.
    (0x302B, 0x2A),
    (0x302C, 0x00),
    (0x302D, 0x03),
    (0x3031, 0x01),
    (0x3051, 0x00),
    (0x305C, 0x03),
    (0x3060, 0x00),
    (0x3061, 0xFA),
    (0x3062, 0xFF),
    (0x3063, 0xFF),
    (0x3064, 0xFF),
    (0x3065, 0xFF),
    (0x3066, 0xFF),
    (0x3067, 0xFF),
    (0x3068, 0xFF),
    (0x3069, 0xFF),
    (0x306A, 0xFF),
    (0x306B, 0xFF),
    (0x306C, 0xFF),
    (0x306D, 0xFF),
    (0x306E, 0xFF),
    (0x306F, 0xFF),
    (0x3070, 0xFF),
    (0x3071, 0xFF),
    (0x3072, 0xFF),
    (0x3073, 0xFF),
    (0x3074, 0xFF),
    (0x3075, 0xFF),
    (0x3076, 0xFF),
    (0x3077, 0xFF),
    (0x3078, 0xFF),
    (0x3079, 0xFF),
    (0x307A, 0xFF),
    (0x307B, 0xFF),
    (0x307C, 0xFF),
    (0x307D, 0xFF),
    (0x307E, 0xFF),
    (0x307F, 0xFF),
    (0x3080, 0x01),
    (0x3081, 0x01),
    (0x3082, 0x03),
    (0x3083, 0x20),
    (0x3084, 0x00),
    (0x3085, 0x20),
    (0x3086, 0x00),
    (0x3087, 0x20),
    (0x3088, 0x00),
    (0x3089, 0x04),
    (0x3094, 0x02),
    (0x3095, 0x02),
    (0x3096, 0x00),
    (0x3097, 0x02),
    (0x3098, 0x00),
    (0x3099, 0x02),
    (0x309E, 0x05),
    (0x309F, 0x02),
    (0x30A0, 0x02),
    (0x30A1, 0x00),
    (0x30A2, 0x08),
    (0x30A3, 0x00),
    (0x30A4, 0x20),
    (0x30A5, 0x04),
    (0x30A6, 0x02),
    (0x30A7, 0x02),
    (0x30A8, 0x01),
    (0x30A9, 0x00),
    (0x30AA, 0x02),
    (0x30AB, 0x34),
    (0x30B0, 0x03),
    (0x30C4, 0x10),
    (0x30C5, 0x01),
    (0x30C6, 0xBF),
    (0x30C7, 0x00),
    (0x30C8, 0x00),
    (0x30CB, 0xFF),
    (0x30CC, 0xFF),
    (0x30CD, 0x7F),
    (0x30CE, 0x7F),
    (0x30D3, 0x01),
    (0x30D4, 0xFF),
    (0x30D5, 0x00),
    (0x30D6, 0x40),
    (0x30D7, 0x00),
    (0x30D8, 0xA7),
    (0x30D9, 0x05),
    (0x30DA, 0x01),
    (0x30DB, 0x40),
    (0x30DC, 0x00),
    (0x30DD, 0x27),
    (0x30DE, 0x05),
    (0x30DF, 0x07),
    (0x30E0, 0x40),
    (0x30E1, 0x00),
    (0x30E2, 0x27),
    (0x30E3, 0x05),
    (0x30E4, 0x47),
    (0x30E5, 0x30),
    (0x30E6, 0x00),
    (0x30E7, 0x27),
    (0x30E8, 0x05),
    (0x30E9, 0x87),
    (0x30EA, 0x30),
    (0x30EB, 0x00),
    (0x30EC, 0x27),
    (0x30ED, 0x05),
    (0x30EE, 0x00),
    (0x30EF, 0x40),
    (0x30F0, 0x00),
    (0x30F1, 0xA7),
    (0x30F2, 0x05),
    (0x30F3, 0x01),
    (0x30F4, 0x40),
    (0x30F5, 0x00),
    (0x30F6, 0x27),
    (0x30F7, 0x05),
    (0x30F8, 0x07),
    (0x30F9, 0x40),
    (0x30FA, 0x00),
    (0x30FB, 0x27),
    (0x30FC, 0x05),
    (0x30FD, 0x47),
    (0x30FE, 0x30),
    (0x30FF, 0x00),
    (0x3100, 0x27),
    (0x3101, 0x05),
    (0x3102, 0x87),
    (0x3103, 0x30),
    (0x3104, 0x00),
    (0x3105, 0x27),
    (0x3106, 0x05),
    (0x310B, 0x10),
    (0x3113, 0xA0),
    (0x3114, 0x67),
    (0x3115, 0x42),
    (0x3116, 0x10),
    (0x3117, 0x0A),
    (0x3118, 0x3F),
    (0x311C, 0x10),
    (0x311D, 0x06),
    (0x311E, 0x0F),
    (0x311F, 0x0E),
    (0x3120, 0x0D),
    (0x3121, 0x0F),
    (0x3122, 0x00),
    (0x3123, 0x1D),
    (0x3126, 0x03),
    (0x3128, 0x57),
    (0x312A, 0x11),
    (0x312B, 0x41),
    (0x312E, 0x00),
    (0x312F, 0x00),
    (0x3130, 0x0C),
    (0x3141, 0x2A),
    (0x3142, 0x9F),
    (0x3147, 0x18),
    (0x3149, 0x18),
    (0x314B, 0x01),
    (0x3150, 0x50),
    (0x3152, 0x00),
    (0x3156, 0x2C),
    (0x315A, 0x0A),
    (0x315B, 0x2F),
    (0x315C, 0xE0),
    (0x315F, 0x02),
    (0x3160, 0x1F),
    (0x3163, 0x1F),
    (0x3164, 0x7F),
    (0x3165, 0x7F),
    (0x317B, 0x94),
    (0x317C, 0x00),
    (0x317D, 0x02),
    (0x318C, 0x00),
    (Addr::ModeSelect as u16, Mode::I2cContinuousStreaming as u8),
    (Addr::CommandUpdate as u16, 0x01),
];
